--------
Overview
--------

The stack depth library can be used to generate simple statistics about stack
depth and functions called by an application.  Upon each function entry, the
library records the function called, the call site and the current stack depth.
The python script can then be used to parse the raw data (optionally with the
actually binary in hand) to print information about the application's stack
behavior.

---------------------------------------
Preparing your application for analysis
---------------------------------------

Compile your applications using the "-finstrument-functions" parameter and link
against the libstack-depth.a library.

-----------------------------
Using the stack depth library
-----------------------------

Run your application with a representative input to capture application
behavior.  The instrumented binary will produce a data file named
"stack_depth.dat" (the filename can be changed by setting the
STACK_DATA_FILENAME environment variable).  Use the python script to parse
the data and print statistics about stack depth and which functions were
called most frequently (and by whom):

$ ./stack-depth-info.py -d stack_depth.dat

With '-v', you can see the most frequent callers of each the called functions:

$ ./stack-depth-info.py -d stack_depth.dat -v

The library saves the function address that it sees, which can be hard to
understand.  You can optionally pass the name of the binary and the script will
read the symbol table and print the names of functions rather than addresses
(this also works with '-v'):

$ ./stack-depth-info.py -d stack_depth.dat -b <executable>

With '-f', the tool will only print the names of called functions (note that
this requires '-b'):

$ ./stack-depth-info.py -d stack_depth.dat -b <executable> -f

This is useful for generating a list of instrumented functions that are "hit"
in a run of the executable.

