//===-- llvm/Target/TargetValueGenerator.h - Value Generator ----*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file provides an API for generating a series of simple metadata
// instructions for reconstituting a value.  This is used by the stack
// transformation runtime to set up architecture-specific live values.
//
// Below we refer to the value being generated as the "generated value".
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_TARGETVALGEN_H
#define LLVM_TARGET_TARGETVALGEN_H

#include "llvm/CodeGen/StackTransformTypes.h"

namespace llvm {

//===----------------------------------------------------------------------===//
// Superclass for ISA-specific value generators
//

class TargetValueGenerator {
public:
  TargetValueGenerator(const TargetValueGenerator &) = delete;
  void operator=(const TargetValueGenerator &) = delete;
  virtual ~TargetValueGenerator() {};

  /// Return a list of instructions for re-generating a value produced by a
  /// a machine instruction, or null if instruction not supported.
  virtual void
  getValueGenInstr(const MachineInstr *MI,
                   MachineGeneratedVal::ValueGenInstList &IL) const = 0;

  /// Return a machine-specific value generated by a machine instruction.
  virtual MachineLiveValPtr getMachineValue(const MachineInstr *MI) const = 0;

protected:
  TargetValueGenerator() {}
};

} // End llvm namespace

#endif

